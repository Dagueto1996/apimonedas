version: '3.8'

services:
  # Base de datos PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: postgres_monedas
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-monedas}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-sa}
      POSTGRES_INITDB_ARGS: --encoding=UTF-8 --lc-collate=C --lc-ctype=C
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    networks:
      - monedas_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-monedas}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Aplicación API Monedas
  api-monedas:
    build:
      context: .
      dockerfile: ./presentacion/dockerfile
    container_name: api_monedas
    environment:
      # Configuración de Base de Datos
      SPRING_DATASOURCE_URL: jdbc:postgresql://${POSTGRES_HOST:-postgres}:5432/${POSTGRES_DB:-monedas}
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER:-postgres}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD:-sa}
      SPRING_DATASOURCE_DRIVER_CLASS_NAME: org.postgresql.Driver
      
      # Configuración JPA
      SPRING_JPA_HIBERNATE_DDL_AUTO: ${JPA_DDL_AUTO:-update}
      SPRING_JPA_SHOW_SQL: ${JPA_SHOW_SQL:-true}
      SPRING_JPA_PROPERTIES_HIBERNATE_DIALECT: org.hibernate.dialect.PostgreSQLDialect
      SPRING_JPA_PROPERTIES_HIBERNATE_FORMAT_SQL: true
      
      # Configuración del servidor
      SERVER_PORT: 8080
      
      # Configuración de logs
      LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_SECURITY: ${LOG_LEVEL_SECURITY:-DEBUG}
      LOGGING_LEVEL_ORG_HIBERNATE_SQL: ${LOG_LEVEL_HIBERNATE:-DEBUG}
      LOGGING_LEVEL_ROOT: ${LOG_LEVEL_ROOT:-INFO}
      
      # Variables de entorno para JWT
      JWT_SECRET: ${JWT_SECRET:-mySecretKey123456789}
      JWT_EXPIRATION: ${JWT_EXPIRATION:-86400000}
      
    ports:
      - "${APP_PORT:-8080}:8080"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - monedas_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Adminer para gestión de base de datos (opcional)
  adminer:
    image: adminer:latest
    container_name: adminer_monedas
    ports:
      - "${ADMINER_PORT:-8081}:8080"
    environment:
      ADMINER_DEFAULT_SERVER: postgres
      ADMINER_DESIGN: pepa-linha
    depends_on:
      - postgres
    networks:
      - monedas_network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local

networks:
  monedas_network:
    driver: bridge
